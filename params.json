{"name":"Flex-autopair","body":"# Notice\r\n```\r\nI'm not good at English.\r\nSo please correct my English.\r\n```\r\nFlex Autopair automatically insert pair braces and quotes, insertion conditions & actions are highly customizable.\r\n\r\n# Features\r\n- Less configuration: Auto detect pairs from syntax table.\r\n- More customizable: Insertion conditions & actions are highly customizable.\r\n\r\n# Default setting\r\n- Auto insert matching pair(e.g. quote bracket paren)\r\n- Undo can cancel only auto insertion\r\n- Skip close pair when you press by mistake\r\n- Wrap something(e.g. word symbol url) with pairs\r\nIn c like languages and lisp languages have additional behavior. It is explained in demo video.\r\n\r\n# Demo video\r\n\r\n<iframe src=\"http://player.vimeo.com/video/39530265\" width=\"500\" height=\"375\" frameborder=\"0\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>\r\n\r\nb\r\n\r\n<object width=\"500\" height=\"375\"><param name=\"allowfullscreen\" value=\"true\" /><param name=\"allowscriptaccess\" value=\"always\" /><param name=\"movie\" value=\"http://vimeo.com/moogaloop.swf?clip_id=39530265&amp;server=vimeo.com&amp;show_title=0&amp;show_byline=0&amp;show_portrait=0&amp;color=00adef&amp;fullscreen=1\" /><embed src=\"http://vimeo.com/moogaloop.swf?clip_id=39530265&amp;server=vimeo.com&amp;show_title=0&amp;show_byline=0&amp;show_portrait=0&amp;color=00adef&amp;fullscreen=1\" type=\"application/x-shockwave-flash\" allowfullscreen=\"true\" allowscriptaccess=\"always\" width=\"500\" height=\"375\"></embed></object>\r\n\r\n# Setup\r\nYou can install from github.\r\n\r\n```lisp\r\n(auto-install-from-url \"https://raw.github.com/uk-ar/flex-autopair/master/flex-autopair.el\")\r\n```\r\n\r\nOr you can install from marmalade.\r\n\r\n```\r\nM-x package-install flex-autopair\r\n```\r\n\r\nThen modify your .emacs like this.\r\n\r\n```lisp\r\n(require 'flex-autopair)\r\n(flex-autopair-mode 1)\r\n```\r\n\r\n# Customizing action in specific condition\r\nYou can highly customize Insertion conditions & actions in this elisp. These behavior can be described by flex-autopair-conditions & flex-autopair-actions variables.\r\n\r\n## flex-autopair-conditions\r\nflex-autopair-conditions means conditions when inserting action should execute. This variable is a association list of conditional expressions vs corresponding action names(symbol). An ordinary element of the alist looks like (sexp . action-name)\r\n\r\nHere is the example code which is a part of default flex-autopair-conditions.\r\n\r\n```lisp\r\n(setq flex-autopair-conditions\r\n      `(;; Insert matching pair.\r\n        (openp . pair)\r\n        ;; Skip self.\r\n        ((and closep\r\n              (eq (char-after) last-command-event)) . skip)\r\n        (closep . self)\r\n        ))\r\n```\r\n\r\nflex-autopair.el searches flex-autopair-conditions for the first element in which conditional expression is true, then execute action of the element.\r\nIn the setting show above behave like this\r\n\r\n1. Executing \"pair\" when you press open pair (open bracket, open paren, or open quote).\r\n2. Executing \"skip\" when you press close pair and the charactor at point is same as you press.\r\n3. Executing \"self\" when you press close pair and the other conditions.\r\n\r\nopenp is a variable which is set to t when you press open pair. closep is the opposite of openp: it is set to t if when you press close pair.\r\n\r\nThose actions(pair, skip, and self) are mapped to actual behavior by flex-autopair-actions.\r\n\r\n## flex-autopair-actions\r\nThis variable is a association list of action names(symbol) vs corresponding behavior(any S-expressions).An ordinary element of the alist looks like (action-name . sexp)\r\n\r\nHere is the example code which is a part of default flex-autopair-actions.\r\n\r\n```lisp\r\n(setq flex-autopair-actions\r\n      '((pair . (progn (call-interactively 'self-insert-command)\r\n                       (save-excursion\r\n                         (insert closer))))\r\n        (skip . (forward-char 1))\r\n        (self . (call-interactively 'self-insert-command))\r\n        ))\r\n```\r\n\r\nflex-autopair.el looks up action name in flex-autopair-actions, and evaluates its associated S expression.\r\nIn the setting show above behave like this\r\n+ pair: Insert matching pair.\r\n+ skip: Only move forward one character.\r\n+ self: inserts the last character typed.\r\nYou can add your setting in flex-autopair-conditions.\r\n\r\n```lisp\r\n(setq flex-autopair-user-conditions-high\r\n      `((openp . hoge)\r\n        (closep . fuga)))\r\n(flex-autopair-reload-conditions)\r\n```\r\n\r\nflex-autopair-reload-conditions applies flex-autopair-user-conditions-high to flex-autopair-conditions with proper priority.\r\nAnd you can add your setting in flex-autopair-conditions.\r\n\r\n```lisp\r\n(add-to-list\r\n 'flex-autopair-actions\r\n '(hoge . (message \"this is hoge\"))\r\n )\r\n```\r\n\r\n# Adding pair charactor.\r\nFlex-autopair automatically detect pairs from syntax table. But There are some situations in which you sometime want to insert pair, and others insert only you pressed. For example, \"<\" should be treated as pair only after \"#include\" directive in C language.\r\n\r\nYou can do this with the following steps.\r\n\r\n1. Adding new pair of charactor\r\n2. Adding condition of the pair.\r\n3. Adding new pair of charactor\r\n\r\nflex-autopair-pairs is a association list of open pair charactor vs close pair charactor. An ordinary element of the alist looks like (?open-pair . ?close-pair). flex-autopair-pairs is   buffer local variable so that you can set pairs each major mode.\r\n\r\nHere is the example code which enables \"<\" and \">\" pair in c-mode.\r\n\r\n```lisp\r\n(defun my-hook-function ()\r\n  (add-to-list 'flex-autopair-pairs '(?\\< . ?\\>)))\r\n(add-hook 'c-mode-hook 'my-hook-function)\r\n```\r\n\r\n# Adding conditions for the pair\r\nFlex-autopair insert matching pair when you press open pair in the default setting. So you should add 2 settings for \"<\" in c-mode.\r\n\r\n1. Executing \"pair\" when \"#include\" directive exist.\r\n2. Executing \"self\" when \"#include\" directive is not exist.\r\nSample code is like this.\r\n\r\n```lisp\r\n(setq flex-autopair-user-conditions-high\r\n      `(((and\r\n          (eq major-mode 'c-mode)\r\n          (eq last-command-event ?<)\r\n          (save-excursion (re-search-backward \"#include\" (point-at-bol) t)))\r\n         . pair)\r\n        ((and\r\n          (eq major-mode 'c-mode)\r\n          (eq last-command-event ?<))\r\n         . self)\r\n        ))\r\n(flex-autopair-reload-conditions)\r\n```\r\n\r\nThat's all.","tagline":"","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}